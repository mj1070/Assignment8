const express = require('express');
const app = express();
const port = 3003;
app.use(express.json());

const swaggerJsdoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');
const cors = require('cors');


const mariadb = require('mariadb');
const pool = mariadb.createPool({
       host : 'localhost',
       user : 'root',
       password: 'root',
       database:  'sample',
       port: 3306,
       connectionLimit:5
});

const options = {
    swaggerDefinition: {
    openapi: '3.0.0',
    componenets: {},
        info: {
           title: 'Maria DB API',
           version: '1.0.0',
           description: 'Mariadb API autogenerated by swagger doc and Mandy Fisher-Wesley',
       },
       host: '24.199.84.107:3003',
       basePath: '/',
   },
   apis: ['./server.js'],
};
const specs = swaggerJsdoc(options);

app.use('/docs', swaggerUi.serve, swaggerUi.setup(specs));
app.use(cors());

/**
* @swagger
* /company:
*    get:
*      description: Return all companies
*      produces:
*          - application/json
*      responses:
*          200:
*              description: Object company containing an array of companies
*/
app.get('/company', function(req,resp) {
    pool.query('SELECT * FROM company')
    .then(res => {
            resp.statusCode = 200;
            resp.setHeader('Content-Type','application/json');
            resp.json(res);
            })
    .catch(err => console.error('Error in executing query', err.stack));
});
/**
 * @swagger
 * /customer:
 *    get:
 *      description: Return all customers
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Object customers containing an array of customers
 */
app.get('/customer', function(req,resp) {
    pool.query('SELECT * FROM customer')
    .then(res => {
            resp.statusCode = 200;
            resp.setHeader('Content-Type','Application/json');
            resp.send(res);
            })
    .catch(err => console.error('Error in executing query', err.stack));
});
/**
 * @swagger
 * /student:
 *    get:
 *      description: Return all students
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Object student containing an array of students
 */
app.get('/student', function(req,resp) {
    pool.query('SELECT * FROM student')
    .then(res => {
            resp.statusCode = 200;
            resp.setHeader('Content-Type','Application/json');
            resp.send(res);
            })
    .catch(err => console.error('Error in executing query', err.stack));
});
/**
 * @swagger
 * /orders:
 *    get:
 *      description: Return all orders
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Object orders containing an array of orders
 */
app.get('/orders', function(req,resp) {
    pool.query('SELECT * FROM orders')
    .then(res => {
            resp.statusCode = 200;
            resp.setHeader('Content-Type','Application/json');
            resp.send(res);
            })
    .catch(err => console.error('Error in executing query', err.stack));
});
/**
 *
 * @swagger
 * /company:
 *    post:
 *      summary: Used to insert a company data
 *      description: This API is used to insert a company
 *      requestBody:
 *            required: true
 *            content:
 *                 application/json:
 *                     schema:
 *                         type: object
 *                         properties:
 *                             COMPANY_ID:
 *                                       type: string
 *                             COMPANY_NAME:
 *                                       type: string
 *                             COMPANY_CITY:
 *                                       type: string
 *      responses:
 *          200:
 *              description: A new company has been added
 *          422:
 *              description: Error in validation
 *          500:
 *              description: Error encountered while inserting company
 */
app.post('/company', function (req, resp) {
    const { COMPANY_ID, COMPANY_NAME, COMPANY_CITY } = req.body;    //COMPANY_ID added

    if (! COMPANY_ID || !COMPANY_NAME || !COMPANY_CITY) {          //COMPANY_ID code changes
        return resp.status(400).json({ error: 'Both name and address are required' });
    }

    //COMPANY_ID code changes
    pool.query('INSERT INTO company (COMPANY_ID,COMPANY_NAME, COMPANY_CITY) VALUES (?,?, ?)', [COMPANY_ID,COMPANY_NAME, COMPANY_CITY])
        .then(() => {
            response = {result : 'A new company data has been added'};
            resp.status(200);
            resp.setHeader('Content-Type', 'application/json');
            resp.json(response);})
        .catch(err => {
            console.error('Error in executing query', err.stack);
            resp.status(500).json({ error: 'Internal Server Error' });
        });
 });
 /**
 *
 * @swagger
 * /company/{COMPANY_ID}:
 *    put:
 *      summary: Used to update fields of a company for a given company ID
 *      description: This API is used to insert a new data for all fields of a given company ID  *      parameters:
 *         - in: path
 *           name: COMPANY_ID
 *           required: true
 *           description: ID of company that needs to be updated
 *           schema:
 *              type: string
 *      requestBody:
 *            required: true
 *            content:
 *                 application/json:
 *                     schema:
 *                         type: object
 *                         properties:
 *                             COMPANY_NAME:
 *                                       type: string
 *                             COMPANY_CITY:
 *                                       type: string
 *      responses:
 *          200:
 *              description: Company data has been updated
 *          422:
 *              description: Error in validation
 *          500:
 *              description: Error encountered while updating city
 */
app.put('/company/:COMPANY_ID', function (req, resp) {
    const company_Id = req.params.COMPANY_ID;
    const {COMPANY_NAME,COMPANY_CITY}= req.body;
    pool.query('UPDATE company SET COMPANY_NAME = ?, COMPANY_CITY= ? WHERE COMPANY_ID = ?', [COMPANY_NAME, COMPANY_CITY, company_Id])
    .then(() => {
        resp.status(200).json({ message: 'Company updated successfully' });
    })
    .catch(err => {
        console.error('Error in executing query', err.stack);
        resp.status(500).json({ error: 'Internal Server Error' });
    });
});
/**
 *
 * @swagger
 * /company/{COMPANY_ID}:
 *    patch:
 *      summary: Used to update a company city field for a given company ID
 *      description: This API is used to update a company record
 *      parameters:
 *         - in: path
 *           name: COMPANY_ID
 *           required: true
 *           description: ID of company that needs city to be updated
 *           schema:
 *              type: string
 *      requestBody:
 *            required: true
 *            content:
 *                 application/json:
 *                     schema:
 *                         type: object
 *                         properties:
 *                             COMPANY_CITY:
 *                                       type: string
 *      responses:
 *          200:
 *              description: The company city has been updated
 *          422:
 *              description: Error in validation
 *          500:
 *              description: Error encountered while updating city
 */
app.patch('/company/:COMPANY_ID', function (req, resp) {
    const company_Id = req.params.COMPANY_ID;
    const updateFields = req.body;

    if (Object.keys(updateFields).length === 0) {
        return resp.status(400).json({ error: 'No fields to update provided' });
    }

    const updateParams = Object.values(updateFields);

    // Create a SET clause dynamically based on the fields to update
    const setClause = Object.keys(updateFields).map(field => `${field} = ?`).join(', ');

    pool.query('UPDATE company SET ' + setClause + ' WHERE COMPANY_ID = ?', [...updateParams, company_Id])
        .then(() => {
            resp.status(200).json({ message: 'Company updated successfully' });
        })
        .catch(err => {
            console.error('Error in executing query', err.stack);
            resp.status(500).json({ error: 'Internal Server Error' });
        });
 });
 /**
 *@swagger
 * /company/{COMPANY_ID}:
 *   delete:
 *     summary: Delete a company by COMPANY_ID
 *     description: This API is used to delete a company's data from the table.
 *     parameters:
 *       - in: path
 *         name: COMPANY_ID
 *         required: true
 *         description: ID of the company that needs to be deleted
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: Company deleted successfully
 *       404:
 *         description: Company not found
 *       500:
 *         description: Internal Server Error
 */
app.delete('/company/:COMPANY_ID', async (req, resp) => {
    const COMPANY_ID = req.params.COMPANY_ID;
  
    try {
      const result = await pool.query('DELETE FROM company WHERE COMPANY_ID = ?', [COMPANY_ID]);
  
      if (result.affectedRows === 0) {
        resp.status(404).json({ error: 'Company not found' });
      } else {
        resp.status(200).send();
      }
    } catch (err) {
      console.error('Error in executing query', err.stack);
      resp.status(500).json({ error: 'Internal Server Error' });
    }
  });

app.listen(port, () => {
console.log(`API served at http://localhost:${port}`,port);
});